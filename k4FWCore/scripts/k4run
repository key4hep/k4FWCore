#!/usr/bin/env python

from __future__ import print_function
import os
import sys
import argparse
from multiprocessing import cpu_count
import logging


# these default properties are filtered as otherwise they will clutter the argument list
__filterGaudiProps = [ "ContextService", "Cardinality", "Context", "CounterList", "EfficiencyRowFormat",
  "Enable", "ErrorCount", "ErrorMax", "ErrorsPrint", "ExtraInputs", "ExtraOutputs",
  "FilterCircularDependencies", "StatEntityList", "IsIOBound", "MonitorService", "NeededResources",
  "PropertiesPrint", "RegisterForContextService", "RegularRowFormat", "RequireObjects", "RootInTES",
  "StatPrint", "StatTableHeader", "Timeline", "TypePrint", "UseEfficiencyRowFormat",
  "EnableFaultHandler", "InhibitPathes", "EnableAccessHandler", "ForceLeaves", "RootName",
  "DataAccessName", "DataFaultName", "RootCLID", "PrintEmptyCounters", "Blocking",
  "VetoObjects", "CheckToolDeps", "AutoRetrieveTools",
  ]

#---------------------------------------------------------------------
if __name__ == "__main__":
    # ensure that we (and the subprocesses) use the C standard localization
    os.environ['LC_ALL'] = 'C'

    logger = logging.getLogger(__name__)
    logger.setLevel(logging.INFO)
    # Don't propagate to the root logger, otherwise the output will be doubled
    logger.propagate = 0
    # formatter = logging.Formatter('[%(asctime)s %(levelname)s] %(message)s', datefmt='%Y-%b-%d %H:%M:%S')
    formatter = logging.Formatter('[k4run] %(message)s')
    handler = logging.StreamHandler()
    handler.setFormatter(formatter)
    logger.addHandler(handler)

    # run all the configuration files
    # we generate arguments from them, so we need to load them
    # before parsing the arguments
    # to avoid parsing them twice, just assume the positional arguments
    # come first and as soon as we encounter "-" we stop
    run_with_options_file = False
    for f in sys.argv[1:]:
      if f[0] != '-':
        exec(open(f).read())
        run_with_options_file = True
      else:
        break

    parser = argparse.ArgumentParser(description="Run job in the Key4HEP framework")
    parser.add_argument("config_files", nargs="*",
                        help="Gaudi config (python) files describing the job")
    parser.add_argument("--dry-run", action="store_true",
                        help="Do not actually run the job, just parse the config files")
    parser.add_argument("-v", "--verbose", action="store_true",
                        help="Run job with verbose output")
    parser.add_argument("-n", "--num-events", type=int,
                        help="Number of events to run")
    parser.add_argument("-l", "--list", action="store_true",
                        help="Print all the configurable components available in the framework and exit")
    parser.add_argument("--gdb", action="store_true", help="Attach gdb debugger")

    # TODO: Don't want to advertise this until tested.
    # GaudiPython Parallel Mode Option
    #   Argument must be an integer in range [ -1, sys_cpus ]
    #   -1   : All available cpus
    #    0   : Serial Mode (traditional gaudirun)
    #    n>0 : parallel with n cpus (n <= sys_cpus)
    parser.add_argument("--ncpus", type=int, default=0,
                      help="Start Gaudi in parallel mode using NCPUS processes. "
                           "0 => serial mode (default), -1 => use all CPUs")


    # print a doc line showing the configured algorithms
    if run_with_options_file:
      logger.info(' --> '.join([alg.name() for alg in ApplicationMgr().TopAlg]))

      option_db = {}
      # loop over all components that were configured in the options file
      # use dict.fromkeys so that the confs are sorted (Python >= 3.7)
      for conf in dict.fromkeys(ApplicationMgr.allConfigurables.values()):
        # skip public tools and the applicationmgr itself
        if "ToolSvc" in conf.name() or "ApplicationMgr" in conf.name():
          continue
        props = conf.getPropertiesWithDescription() #dict propertyname: (propertyvalue, propertydescription)
        for prop in props:
          # only add arguments for relevant properties
          if prop in __filterGaudiProps or "Audit" in prop or hasattr(props[prop][0], '__slots__'):
            continue
          propvalue = props[prop][0]

          # if it is set to "no value" it hasn't been touched in the options file
          if propvalue == conf.propertyNoValue:
              propvalue = conf.getDefaultProperty(prop) # thus get the default value
          proptype = type(props[prop][0])
          # if the property is a list of something, we need to set argparse nargs to '+'
          propnargs = "?"
          if proptype == list:
              # tricky edgecase: if the default is an empty list there is no way to get the type
              if len(propvalue) == 0:
              # just skip for now
              #print("Warning: argparse cannot deduce type for property %s of %s. Needs to be set in options file." % (prop, conf.name()))
                continue
              else:
                # deduce type from first item of the list
                proptype = type(propvalue[0])
              propnargs = "+"

          # add the argument twice, once as "--PodioOutput.filename"
          # and once as "--filename.PodioOutput"
          propName = conf.name() + '.' + prop
          propNameReversed = prop + '.' + conf.name()
          option_db[propName] = (conf, propName)
          parser.add_argument( "--%s" % propName, "--%s" % propNameReversed, type=proptype, help=props[prop][1],
              nargs=propnargs,
              default=propvalue)

    opts = parser.parse_args()

    if opts.list:
        from Gaudi import Configuration
        cfgDb = Configuration.cfgDb
        logger.info("Available components:\n%s" % (21 * "="))
        for item in sorted(cfgDb):
            if True: # another option could filter Gaudi components here
              try:
                path_to_component = __import__(cfgDb[item]["module"]).__file__
              except ImportError:
                path_to_component = "NotFound"
              print("  %s (from %s), \n\t\t path: %s\n" % (item, cfgDb[item]["lib"], path_to_component))
            else:
                if not "Gaudi" in cfgDb[item]["lib"]:
                  print("  %s (from %s)" % (item, cfgDb[item]["lib"]))
        sys.exit()

    if not run_with_options_file:
      logging.error("usage: " + os.path.basename(__file__) + " [gaudi_config.py ...] Specify a gaudi options file to run")
      sys.exit()

    opts_dict = vars(opts)
    for optionName, propTuple in option_db.items():
      logger.info("Option name: " + str(propTuple[1]) + " " + optionName + " " + str(opts_dict[optionName]))
      propTuple[0].setProp(propTuple[1].rsplit(".",1)[1], opts_dict[optionName])

    if opts.verbose:
      ApplicationMgr().OutputLevel = VERBOSE
    if opts.num_events is not None:
      ApplicationMgr().EvtMax = opts.num_events
    # Allow graceful exit with Ctrl + C
    ApplicationMgr().StopOnSignal = True

    # Parallel Option ---------------------------------------------------------
    if opts.ncpus:
        sys_cpus = cpu_count()
        if opts.ncpus > sys_cpus:
            s = "Invalid value : --ncpus : only %i cpus available" % sys_cpus
            parser.error(s)
        elif opts.ncpus < -1:
            s = "Invalid value : --ncpus must be integer >= -1"
            parser.error(s)

    # configure the logging
    from GaudiKernel.ProcessJobOptions import InstallRootLoggingHandler

    prefix = "# "
    level = logging.INFO
    InstallRootLoggingHandler(prefix, level=level, with_time=opts.verbose)
    root_logger = logging.getLogger()

    from Gaudi.Main import gaudimain
    c = gaudimain()
    if not opts.dry_run:
        # Do the real processing
        retcode = c.run(opts.gdb, opts.ncpus)
        sys.exit(retcode)
